{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\Documents\\\\Work\\\\Projects\\\\Interview\\\\task-list-app\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport taskService from '../services/taskService';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  loadTasks\n}) => {\n  _s();\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editingTitle, setEditingTitle] = useState('');\n  const [editingDescription, setEditingDescription] = useState('');\n  const deleteTask = async id => {\n    try {\n      await taskService.deleteTask(id);\n      loadTasks();\n    } catch (error) {\n      console.error(`Failed to delete task with id ${id}:`, error);\n    }\n  };\n  const handleEdit = task => {\n    setEditingTaskId(task.id);\n    setEditingTitle(task.title);\n    setEditingDescription(task.description);\n  };\n  const handleUpdate = async () => {\n    if (editingTaskId === null) return;\n    try {\n      var _tasks$find;\n      const updatedTask = {\n        id: editingTaskId,\n        title: editingTitle,\n        description: editingDescription,\n        status: (_tasks$find = tasks.find(task => task.id === editingTaskId)) === null || _tasks$find === void 0 ? void 0 : _tasks$find.status\n      };\n      await taskService.updateTask(editingTaskId, updatedTask);\n      loadTasks();\n      setEditingTaskId(null);\n    } catch (error) {\n      console.error(`Failed to update task with id ${editingTaskId}:`, error);\n    }\n  };\n  const handleStatusToggle = async task => {\n    try {\n      let newStatus = 'Pending';\n      switch (task.status) {\n        case 'Pending':\n          newStatus = 'InProgress';\n          break;\n        case 'InProgress':\n          newStatus = 'Completed';\n          break;\n        case 'Completed':\n          newStatus = 'Pending';\n          break;\n        default:\n          break;\n      }\n      const updatedTask = {\n        ...task,\n        status: newStatus\n      };\n      await taskService.updateTask(task.id, updatedTask);\n      loadTasks();\n    } catch (error) {\n      console.error(`Failed to update task status with id ${task.id}:`, error);\n    }\n  };\n  const handleBlur = e => {\n    if (!e.currentTarget.contains(e.relatedTarget)) {\n      handleUpdate();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `task-item ${getTaskItemClassName(task.status)}`,\n        onClick: () => handleStatusToggle(task),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-info\",\n          onBlur: handleBlur,\n          tabIndex: -1,\n          children: editingTaskId === task.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: editingTitle,\n              onChange: e => setEditingTitle(e.target.value),\n              className: \"form-control\",\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: editingDescription,\n              onChange: e => setEditingDescription(e.target.value),\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-title\",\n              onClick: e => {\n                e.stopPropagation();\n                handleEdit(task);\n              },\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-description\",\n              onClick: e => {\n                e.stopPropagation();\n                handleEdit(task);\n              },\n              children: task.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn ${getActionButtonClassName(task.status)}`,\n            onClick: e => {\n              e.stopPropagation();\n              handleStatusToggle(task);\n            },\n            children: getActionButtonText(task.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-delete\",\n            onClick: e => {\n              e.stopPropagation();\n              deleteTask(task.id);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper functions to determine CSS classes and button text based on task status\n_s(TaskList, \"nupLsWi+648l7dkA0CgoTP8zwYQ=\");\n_c = TaskList;\nconst getTaskItemClassName = status => {\n  switch (status) {\n    case 'InProgress':\n      return 'task-in-progress';\n    case 'Completed':\n      return 'task-done';\n    case 'Pending':\n    default:\n      return 'task-not-done';\n  }\n};\nconst getActionButtonClassName = status => {\n  switch (status) {\n    case 'InProgress':\n      return 'btn-toggle';\n    case 'Completed':\n      return 'btn-not-done';\n    case 'Pending':\n    default:\n      return 'btn-done';\n  }\n};\nconst getActionButtonText = status => {\n  switch (status) {\n    case 'InProgress':\n      return 'In Progress';\n    case 'Completed':\n      return 'Complete';\n    case 'Pending':\n    default:\n      return 'Pending';\n  }\n};\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","taskService","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","tasks","loadTasks","_s","editingTaskId","setEditingTaskId","editingTitle","setEditingTitle","editingDescription","setEditingDescription","deleteTask","id","error","console","handleEdit","task","title","description","handleUpdate","_tasks$find","updatedTask","status","find","updateTask","handleStatusToggle","newStatus","handleBlur","e","currentTarget","contains","relatedTarget","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","getTaskItemClassName","onClick","onBlur","tabIndex","type","value","onChange","target","autoFocus","stopPropagation","getActionButtonClassName","getActionButtonText","_c","$RefreshReg$"],"sources":["C:/Users/franc/Documents/Work/Projects/Interview/task-list-app/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport taskService from '../services/taskService';\r\nimport { Task } from '../interfaces/Task';\r\nimport '../styles.css';\r\n\r\ninterface TaskListProps {\r\n    tasks: Task[];\r\n    loadTasks: () => void;\r\n}\r\n\r\nconst TaskList: React.FC<TaskListProps> = ({ tasks, loadTasks }) => {\r\n    const [editingTaskId, setEditingTaskId] = useState<number | null>(null);\r\n    const [editingTitle, setEditingTitle] = useState<string>('');\r\n    const [editingDescription, setEditingDescription] = useState<string>('');\r\n\r\n    const deleteTask = async (id: number) => {\r\n        try {\r\n            await taskService.deleteTask(id);\r\n            loadTasks();\r\n        } catch (error) {\r\n            console.error(`Failed to delete task with id ${id}:`, error);\r\n        }\r\n    };\r\n\r\n    const handleEdit = (task: Task) => {\r\n        setEditingTaskId(task.id!);\r\n        setEditingTitle(task.title);\r\n        setEditingDescription(task.description);\r\n    };\r\n\r\n    const handleUpdate = async () => {\r\n        if (editingTaskId === null) return;\r\n        try {\r\n            const updatedTask = { id: editingTaskId, title: editingTitle, description: editingDescription, status: tasks.find(task => task.id === editingTaskId)?.status };\r\n            await taskService.updateTask(editingTaskId, updatedTask);\r\n            loadTasks();\r\n            setEditingTaskId(null);\r\n        } catch (error) {\r\n            console.error(`Failed to update task with id ${editingTaskId}:`, error);\r\n        }\r\n    };\r\n\r\n    const handleStatusToggle = async (task: Task) => {\r\n        try {\r\n            let newStatus: 'Pending' | 'InProgress' | 'Completed' = 'Pending';\r\n            switch (task.status) {\r\n                case 'Pending':\r\n                    newStatus = 'InProgress';\r\n                    break;\r\n                case 'InProgress':\r\n                    newStatus = 'Completed';\r\n                    break;\r\n                case 'Completed':\r\n                    newStatus = 'Pending';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            const updatedTask = { ...task, status: newStatus };\r\n            await taskService.updateTask(task.id!, updatedTask);\r\n            loadTasks();\r\n        } catch (error) {\r\n            console.error(`Failed to update task status with id ${task.id}:`, error);\r\n        }\r\n    };\r\n\r\n    const handleBlur = (e: React.FocusEvent<HTMLDivElement>) => {\r\n        if (!e.currentTarget.contains(e.relatedTarget)) {\r\n            handleUpdate();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Task List</h1>\r\n            <ul className=\"task-list\">\r\n                {tasks.map(task => (\r\n                    <li\r\n                        key={task.id}\r\n                        className={`task-item ${getTaskItemClassName(task.status)}`}\r\n                        onClick={() => handleStatusToggle(task)}\r\n                    >\r\n                        <div className=\"task-info\" onBlur={handleBlur} tabIndex={-1}>\r\n                            {editingTaskId === task.id ? (\r\n                                <>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={editingTitle}\r\n                                        onChange={(e) => setEditingTitle(e.target.value)}\r\n                                        className=\"form-control\"\r\n                                        autoFocus\r\n                                    />\r\n                                    <textarea\r\n                                        value={editingDescription}\r\n                                        onChange={(e) => setEditingDescription(e.target.value)}\r\n                                        className=\"form-control\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"task-title\" onClick={(e) => { e.stopPropagation(); handleEdit(task); }}>\r\n                                        {task.title}\r\n                                    </div>\r\n                                    <div className=\"task-description\" onClick={(e) => { e.stopPropagation(); handleEdit(task); }}>\r\n                                        {task.description}\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"task-actions\">\r\n                            <button\r\n                                className={`btn ${getActionButtonClassName(task.status)}`}\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    handleStatusToggle(task);\r\n                                }}\r\n                            >\r\n                                {getActionButtonText(task.status)}\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-delete\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    deleteTask(task.id!);\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper functions to determine CSS classes and button text based on task status\r\nconst getTaskItemClassName = (status: 'Pending' | 'InProgress' | 'Completed') => {\r\n    switch (status) {\r\n        case 'InProgress':\r\n            return 'task-in-progress';\r\n        case 'Completed':\r\n            return 'task-done';\r\n        case 'Pending':\r\n        default:\r\n            return 'task-not-done';\r\n    }\r\n};\r\n\r\nconst getActionButtonClassName = (status: 'Pending' | 'InProgress' | 'Completed') => {\r\n    switch (status) {\r\n        case 'InProgress':\r\n            return 'btn-toggle';\r\n        case 'Completed':\r\n            return 'btn-not-done';\r\n        case 'Pending':\r\n        default:\r\n            return 'btn-done';\r\n    }\r\n};\r\n\r\nconst getActionButtonText = (status: 'Pending' | 'InProgress' | 'Completed') => {\r\n    switch (status) {\r\n        case 'InProgress':\r\n            return 'In Progress';\r\n        case 'Completed':\r\n            return 'Complete';\r\n        case 'Pending':\r\n        default:\r\n            return 'Pending';\r\n    }\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}