{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\Documents\\\\Work\\\\Projects\\\\Interview\\\\task-list-app\\\\src\\\\components\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Box, Typography } from '@mui/material';\nimport userService from '../services/userService';\nimport './forms.css'; // Ensure this file exists or adjust the path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const loginData = {\n      username: email,\n      passwordHash: password\n    };\n    try {\n      const response = await userService.login(loginData);\n      onLogin(response); // Pass the user data to the parent component\n      setMessage('Login successful!');\n      setIsError(false);\n    } catch (error) {\n      setMessage('Login failed. Please check your credentials.');\n      setIsError(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"login-form\",\n    component: \"form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Email\",\n      type: \"email\",\n      fullWidth: true,\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      required: true,\n      margin: \"normal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Password\",\n      type: \"password\",\n      fullWidth: true,\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      required: true,\n      margin: \"normal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n      color: isError ? 'error' : 'primary',\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"ZbtLP3WYmkKuf6Ih1xDAuK6cxeQ=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","TextField","Button","Box","Typography","userService","jsxDEV","_jsxDEV","Login","onLogin","_s","email","setEmail","password","setPassword","message","setMessage","isError","setIsError","handleSubmit","e","preventDefault","loginData","username","passwordHash","response","login","error","className","component","onSubmit","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","label","type","fullWidth","value","onChange","target","required","margin","color","_c","$RefreshReg$"],"sources":["C:/Users/franc/Documents/Work/Projects/Interview/task-list-app/src/components/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button, Box, Typography } from '@mui/material';\r\nimport userService from '../services/userService';\r\nimport { User } from '../interfaces/User';\r\nimport './forms.css'; // Ensure this file exists or adjust the path\r\n\r\ninterface LoginProps {\r\n    onLogin: (user: User) => void;\r\n}\r\n\r\nconst Login: React.FC<LoginProps> = ({ onLogin }) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        const loginData = { username: email, passwordHash: password };\r\n\r\n        try {\r\n            const response = await userService.login(loginData);\r\n            onLogin(response); // Pass the user data to the parent component\r\n            setMessage('Login successful!');\r\n            setIsError(false);\r\n        } catch (error) {\r\n            setMessage('Login failed. Please check your credentials.');\r\n            setIsError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box className=\"login-form\" component=\"form\" onSubmit={handleSubmit}>\r\n            <Typography variant=\"h6\">Login</Typography>\r\n            <TextField\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n                margin=\"normal\"\r\n            />\r\n            <TextField\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n                margin=\"normal\"\r\n            />\r\n            {message && (\r\n                <Typography color={isError ? 'error' : 'primary'}>{message}</Typography>\r\n            )}\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Login\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}