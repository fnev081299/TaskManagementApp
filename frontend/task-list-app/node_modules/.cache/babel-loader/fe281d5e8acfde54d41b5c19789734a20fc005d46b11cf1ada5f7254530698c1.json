{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport taskService from '../services/taskService';\nconst initialState = {\n  tasks: [],\n  loading: false,\n  error: null\n};\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    getTasksStart(state) {\n      state.loading = true;\n      state.error = null;\n    },\n    getTasksSuccess(state, action) {\n      state.loading = false;\n      state.tasks = action.payload;\n    },\n    getTasksFailure(state, action) {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addTask(state, action) {\n      state.tasks.push(action.payload);\n    },\n    updateTask(state, action) {\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    },\n    deleteTask(state, action) {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n    }\n  }\n});\nexport const {\n  getTasksStart,\n  getTasksSuccess,\n  getTasksFailure,\n  addTask,\n  updateTask,\n  deleteTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;\nexport const fetchTasksByUserId = userId => async dispatch => {\n  try {\n    dispatch(getTasksStart());\n    const tasks = await taskService.getTasksByUserId(userId);\n    dispatch(getTasksSuccess(tasks));\n  } catch (error) {\n    dispatch(getTasksFailure(error.message));\n  }\n};","map":{"version":3,"names":["createSlice","taskService","initialState","tasks","loading","error","tasksSlice","name","reducers","getTasksStart","state","getTasksSuccess","action","payload","getTasksFailure","addTask","push","updateTask","index","findIndex","task","id","deleteTask","filter","actions","reducer","fetchTasksByUserId","userId","dispatch","getTasksByUserId","message"],"sources":["C:/Users/franc/Documents/Work/Projects/Interview/task-list-app/src/slices/taskSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk } from '../store';\r\nimport taskService from '../services/taskService';\r\nimport { Task } from '../interfaces/Task';\r\n\r\ninterface TasksState {\r\n    tasks: Task[];\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\nconst initialState: TasksState = {\r\n    tasks: [],\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        getTasksStart(state) {\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        getTasksSuccess(state, action: PayloadAction<Task[]>) {\r\n            state.loading = false;\r\n            state.tasks = action.payload;\r\n        },\r\n        getTasksFailure(state, action: PayloadAction<string>) {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n        addTask(state, action: PayloadAction<Task>) {\r\n            state.tasks.push(action.payload);\r\n        },\r\n        updateTask(state, action: PayloadAction<Task>) {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.tasks[index] = action.payload;\r\n            }\r\n        },\r\n        deleteTask(state, action: PayloadAction<number>) {\r\n            state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    getTasksStart,\r\n    getTasksSuccess,\r\n    getTasksFailure,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n} = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n\r\nexport const fetchTasksByUserId = (userId: number): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(getTasksStart());\r\n        const tasks = await taskService.getTasksByUserId(userId);\r\n        dispatch(getTasksSuccess(tasks));\r\n    } catch (error) {\r\n        dispatch(getTasksFailure(error.message));\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,WAAW,MAAM,yBAAyB;AASjD,MAAMC,YAAwB,GAAG;EAC7BC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC3BO,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACNC,aAAaA,CAACC,KAAK,EAAE;MACjBA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACtB,CAAC;IACDM,eAAeA,CAACD,KAAK,EAAEE,MAA6B,EAAE;MAClDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACP,KAAK,GAAGS,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,eAAeA,CAACJ,KAAK,EAAEE,MAA6B,EAAE;MAClDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDE,OAAOA,CAACL,KAAK,EAAEE,MAA2B,EAAE;MACxCF,KAAK,CAACP,KAAK,CAACa,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IACpC,CAAC;IACDI,UAAUA,CAACP,KAAK,EAAEE,MAA2B,EAAE;MAC3C,MAAMM,KAAK,GAAGR,KAAK,CAACP,KAAK,CAACgB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAACC,OAAO,CAACQ,EAAE,CAAC;MAC1E,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACdR,KAAK,CAACP,KAAK,CAACe,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO;MACvC;IACJ,CAAC;IACDS,UAAUA,CAACZ,KAAK,EAAEE,MAA6B,EAAE;MAC7CF,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACoB,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAACC,OAAO,CAAC;IACxE;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTJ,aAAa;EACbE,eAAe;EACfG,eAAe;EACfC,OAAO;EACPE,UAAU;EACVK;AACJ,CAAC,GAAGhB,UAAU,CAACkB,OAAO;AAEtB,eAAelB,UAAU,CAACmB,OAAO;AAEjC,OAAO,MAAMC,kBAAkB,GAAIC,MAAc,IAAe,MAAMC,QAAQ,IAAI;EAC9E,IAAI;IACAA,QAAQ,CAACnB,aAAa,CAAC,CAAC,CAAC;IACzB,MAAMN,KAAK,GAAG,MAAMF,WAAW,CAAC4B,gBAAgB,CAACF,MAAM,CAAC;IACxDC,QAAQ,CAACjB,eAAe,CAACR,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZuB,QAAQ,CAACd,eAAe,CAACT,KAAK,CAACyB,OAAO,CAAC,CAAC;EAC5C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}