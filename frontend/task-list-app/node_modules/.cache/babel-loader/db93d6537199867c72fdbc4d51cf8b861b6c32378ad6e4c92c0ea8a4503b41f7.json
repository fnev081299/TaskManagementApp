{"ast":null,"code":"// userService.ts\n\nimport axios from 'axios';\nconst API_URL = 'https://localhost:7244/api/users'; // Ensure this matches your backend URL\nconst USER_KEY = 'taskAppUser'; // Key for storing user session in localStorage\n\nconst setUserSession = user => {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\nconst getUserSession = () => {\n  const userString = localStorage.getItem(USER_KEY);\n  if (userString) {\n    return JSON.parse(userString);\n  }\n  return null;\n};\nconst clearUserSession = () => {\n  localStorage.removeItem(USER_KEY);\n};\nconst getUser = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/current-user`);\n    const user = response.data;\n    setUserSession(user); // Store user session in localStorage upon successful retrieval\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\nconst updateProfilePicture = async file => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    await axios.post(`${API_URL}/current-user/upload-profile-picture`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    // Optionally update user session after profile picture update if necessary\n  } catch (error) {\n    throw error;\n  }\n};\nconst deleteProfilePicture = async () => {\n  try {\n    await axios.delete(`${API_URL}/current-user/remove-profile-picture`);\n    // Optionally update user session after profile picture deletion if necessary\n  } catch (error) {\n    throw error;\n  }\n};\nconst register = async user => {\n  try {\n    const response = await axios.post(API_URL, user);\n    const registeredUser = response.data;\n    setUserSession(registeredUser); // Store user session in localStorage upon successful registration\n    return registeredUser;\n  } catch (error) {\n    throw error;\n  }\n};\nexport default {\n  getUser,\n  updateProfilePicture,\n  deleteProfilePicture,\n  register,\n  getUserSession,\n  // Export getUserSession function for checking user session in components\n  clearUserSession // Export clearUserSession function for logging out\n};","map":{"version":3,"names":["axios","API_URL","USER_KEY","setUserSession","user","localStorage","setItem","JSON","stringify","getUserSession","userString","getItem","parse","clearUserSession","removeItem","getUser","response","get","data","error","updateProfilePicture","file","formData","FormData","append","post","headers","deleteProfilePicture","delete","register","registeredUser"],"sources":["C:/Users/franc/Documents/Work/Projects/Interview/task-list-app/src/services/userService.ts"],"sourcesContent":["// userService.ts\r\n\r\nimport axios from 'axios';\r\nimport { User } from '../interfaces/User';\r\n\r\nconst API_URL = 'https://localhost:7244/api/users'; // Ensure this matches your backend URL\r\nconst USER_KEY = 'taskAppUser'; // Key for storing user session in localStorage\r\n\r\nconst setUserSession = (user: User) => {\r\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n};\r\n\r\nconst getUserSession = (): User | null => {\r\n  const userString = localStorage.getItem(USER_KEY);\r\n  if (userString) {\r\n    return JSON.parse(userString);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst clearUserSession = () => {\r\n  localStorage.removeItem(USER_KEY);\r\n};\r\n\r\nconst getUser = async (): Promise<User> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/current-user`);\r\n    const user = response.data;\r\n    setUserSession(user); // Store user session in localStorage upon successful retrieval\r\n    return user;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst updateProfilePicture = async (file: File): Promise<void> => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    await axios.post(`${API_URL}/current-user/upload-profile-picture`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    // Optionally update user session after profile picture update if necessary\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteProfilePicture = async (): Promise<void> => {\r\n  try {\r\n    await axios.delete(`${API_URL}/current-user/remove-profile-picture`);\r\n    // Optionally update user session after profile picture deletion if necessary\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst register = async (user: User): Promise<User> => {\r\n  try {\r\n    const response = await axios.post(API_URL, user);\r\n    const registeredUser = response.data;\r\n    setUserSession(registeredUser); // Store user session in localStorage upon successful registration\r\n    return registeredUser;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  getUser,\r\n  updateProfilePicture,\r\n  deleteProfilePicture,\r\n  register,\r\n  getUserSession, // Export getUserSession function for checking user session in components\r\n  clearUserSession, // Export clearUserSession function for logging out\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,kCAAkC,CAAC,CAAC;AACpD,MAAMC,QAAQ,GAAG,aAAa,CAAC,CAAC;;AAEhC,MAAMC,cAAc,GAAIC,IAAU,IAAK;EACrCC,YAAY,CAACC,OAAO,CAACJ,QAAQ,EAAEK,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;AACtD,CAAC;AAED,MAAMK,cAAc,GAAGA,CAAA,KAAmB;EACxC,MAAMC,UAAU,GAAGL,YAAY,CAACM,OAAO,CAACT,QAAQ,CAAC;EACjD,IAAIQ,UAAU,EAAE;IACd,OAAOH,IAAI,CAACK,KAAK,CAACF,UAAU,CAAC;EAC/B;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;EAC7BR,YAAY,CAACS,UAAU,CAACZ,QAAQ,CAAC;AACnC,CAAC;AAED,MAAMa,OAAO,GAAG,MAAAA,CAAA,KAA2B;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,GAAGhB,OAAO,eAAe,CAAC;IAC3D,MAAMG,IAAI,GAAGY,QAAQ,CAACE,IAAI;IAC1Bf,cAAc,CAACC,IAAI,CAAC,CAAC,CAAC;IACtB,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOe,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMC,oBAAoB,GAAG,MAAOC,IAAU,IAAoB;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,MAAMrB,KAAK,CAACyB,IAAI,CAAC,GAAGxB,OAAO,sCAAsC,EAAEqB,QAAQ,EAAE;MAC3EI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMQ,oBAAoB,GAAG,MAAAA,CAAA,KAA2B;EACtD,IAAI;IACF,MAAM3B,KAAK,CAAC4B,MAAM,CAAC,GAAG3B,OAAO,sCAAsC,CAAC;IACpE;EACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMU,QAAQ,GAAG,MAAOzB,IAAU,IAAoB;EACpD,IAAI;IACF,MAAMY,QAAQ,GAAG,MAAMhB,KAAK,CAACyB,IAAI,CAACxB,OAAO,EAAEG,IAAI,CAAC;IAChD,MAAM0B,cAAc,GAAGd,QAAQ,CAACE,IAAI;IACpCf,cAAc,CAAC2B,cAAc,CAAC,CAAC,CAAC;IAChC,OAAOA,cAAc;EACvB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAe;EACbJ,OAAO;EACPK,oBAAoB;EACpBO,oBAAoB;EACpBE,QAAQ;EACRpB,cAAc;EAAE;EAChBI,gBAAgB,CAAE;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}